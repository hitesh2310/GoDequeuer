package logs

import (
	"fmt"
	"main/pkg/constants"
	"os"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

var ApplicationLog *zap.Logger

func SetUpApplicationLogs() {
	config := zap.NewProductionConfig()

	// config := zap.NewProductionConfig()
	config.OutputPaths = []string{constants.ApplicationConfig.Application.LogPath + "messagechannelBussinessLogic.log"}
	config.ErrorOutputPaths = []string{"stderr"}
	config.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	config.EncoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder
	// logFileName := constants.ApplicationConfig.Application.LogPath + "messagechannelBussinessLogic.log"
	// // file, err := os.OpenFile("./logs/logfile.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)

	// logFile := &lumberjack.Logger{
	// 	Filename:   logFileName,
	// 	MaxSize:    1,
	// 	MaxAge:     28,
	// 	MaxBackups: 30000,
	// 	LocalTime:  true,
	// 	Compress:   true,
	// }

	logger, err := config.Build()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to initialize logger: %v\n", err)
		os.Exit(1)
	}

	ApplicationLog = logger

	// logger.SetOutput(io.MultiWriter(logFile))
	// ApplicationLog = logger

	// log.Println("Failed to log to file, using default stderr")
	// defer logFile.Close()

}

func InfoLog(format string, a ...interface{}) {
	stringMessage := fmt.Sprintf(format, a...)
	ApplicationLog.Info(stringMessage)
}

func ErrorLog(format string, a ...interface{}) {
	stringMessage := fmt.Sprintf(format, a...)
	ApplicationLog.Error(stringMessage)
}
